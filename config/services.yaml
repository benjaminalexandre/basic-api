# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    log_activate: true

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Http\Controller\:
        resource: '../src/Http/Controller'
        tags: ['controller.service_arguments']

    # => Application
    # => => Provider
    # => => => Reference
    App\Application\Provider\Reference\ReferenceAccessor:
        arguments:
            - "%locale%"

    # => Core
    # => => Utils
    App\Core\Utils\Translator:
        arguments:
            - '@Symfony\Contracts\Translation\TranslatorInterface'
            - "%locale%"

    # => Http
    # => => Middleware
    # => => => EventListener
    App\Http\Middleware\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: processException }

    # => => => ParamConverter
    App\Http\Middleware\ParamConverter\RouteParamConverter:
        tags:
            - { name: request.param_converter, priority: false, converter: http.route }

    App\Http\Middleware\ParamConverter\BodyParamConverter:
        tags:
            - { name: request.param_converter, priority: false, converter: http.body }

    gedmo.listener.timestampable:
        class: Gedmo\Timestampable\TimestampableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ '@annotation_reader' ] ]

    _instanceof:
        App\Application\Common\RequestInterface:
            tags: ['app.requests']
        App\Application\Common\RequestHandlerInterface:
            tags: ['app.request_handlers']
        App\Application\Common\DomainEventHandlerInterface:
            tags: ['app.domain_event_handlers']
        App\Domain\Model\DomainEventInterface:
            tags: ['app.domain_events']
        App\Http\Exception\Normalizer\NormalizerInterface:
            tags: ['app.normalizers']
